Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> comandos
Rule 2     comandos -> <empty>
Rule 3     comandos -> comando comandos
Rule 4     comando -> percent
Rule 5     comando -> doublepercent
Rule 6     comando -> comment
Rule 7     comando -> lex
Rule 8     comando -> yacc
Rule 9     comando -> func
Rule 10    comando -> exp
Rule 11    comando -> instruction
Rule 12    comment -> COMMENT
Rule 13    doublepercent -> % % var
Rule 14    percent -> % atribs
Rule 15    lex -> / var extra : function
Rule 16    func -> » var extra : function
Rule 17    extra -> <empty>
Rule 18    extra -> var
Rule 19    yacc -> + var : instruction exptext instructions FIM
Rule 20    exp -> VAR = exptext
Rule 21    function -> instructions FIM
Rule 22    function -> expreg instructions FIM
Rule 23    atribs -> literalsAndIgnore
Rule 24    atribs -> tokens
Rule 25    tokens -> var = PRETTEXT
Rule 26    literalsAndIgnore -> var = plicastext
Rule 27    var -> VAR
Rule 28    expreg -> text
Rule 29    instructions -> <empty>
Rule 30    instructions -> instruction instructions
Rule 31    instruction -> PRINT
Rule 32    instruction -> RETURN
Rule 33    instruction -> INSTRUCTION
Rule 34    exptext -> <empty>
Rule 35    exptext -> EXPTEXT
Rule 36    plicastext -> PLICASTEXT
Rule 37    text -> TEXT

Terminals, with rules where they appear

%                    : 13 13 14
+                    : 19
/                    : 15
:                    : 15 16 19
=                    : 20 25 26
COMMENT              : 12
EXPTEXT              : 35
FIM                  : 19 21 22
INSTRUCTION          : 33
PLICASTEXT           : 36
PRETTEXT             : 25
PRINT                : 31
RETURN               : 32
TEXT                 : 37
VAR                  : 20 27
error                : 
»                    : 16

Nonterminals, with rules where they appear

atribs               : 14
comando              : 3
comandos             : 1 3
comment              : 6
doublepercent        : 5
exp                  : 10
expreg               : 22
exptext              : 19 20
extra                : 15 16
func                 : 9
function             : 15 16
instruction          : 11 19 30
instructions         : 19 21 22 30
lex                  : 7
literalsAndIgnore    : 23
percent              : 4
plicastext           : 26
prog                 : 0
text                 : 28
tokens               : 24
var                  : 13 15 16 18 19 25 26
yacc                 : 8

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . comandos
    (2) comandos -> .
    (3) comandos -> . comando comandos
    (4) comando -> . percent
    (5) comando -> . doublepercent
    (6) comando -> . comment
    (7) comando -> . lex
    (8) comando -> . yacc
    (9) comando -> . func
    (10) comando -> . exp
    (11) comando -> . instruction
    (14) percent -> . % atribs
    (13) doublepercent -> . % % var
    (12) comment -> . COMMENT
    (15) lex -> . / var extra : function
    (19) yacc -> . + var : instruction exptext instructions FIM
    (16) func -> . » var extra : function
    (20) exp -> . VAR = exptext
    (31) instruction -> . PRINT
    (32) instruction -> . RETURN
    (33) instruction -> . INSTRUCTION

    $end            reduce using rule 2 (comandos -> .)
    %               shift and go to state 12
    COMMENT         shift and go to state 13
    /               shift and go to state 14
    +               shift and go to state 15
    »               shift and go to state 16
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    INSTRUCTION     shift and go to state 20

    prog                           shift and go to state 1
    comandos                       shift and go to state 2
    comando                        shift and go to state 3
    percent                        shift and go to state 4
    doublepercent                  shift and go to state 5
    comment                        shift and go to state 6
    lex                            shift and go to state 7
    yacc                           shift and go to state 8
    func                           shift and go to state 9
    exp                            shift and go to state 10
    instruction                    shift and go to state 11

state 1

    (0) S' -> prog .



state 2

    (1) prog -> comandos .

    $end            reduce using rule 1 (prog -> comandos .)


state 3

    (3) comandos -> comando . comandos
    (2) comandos -> .
    (3) comandos -> . comando comandos
    (4) comando -> . percent
    (5) comando -> . doublepercent
    (6) comando -> . comment
    (7) comando -> . lex
    (8) comando -> . yacc
    (9) comando -> . func
    (10) comando -> . exp
    (11) comando -> . instruction
    (14) percent -> . % atribs
    (13) doublepercent -> . % % var
    (12) comment -> . COMMENT
    (15) lex -> . / var extra : function
    (19) yacc -> . + var : instruction exptext instructions FIM
    (16) func -> . » var extra : function
    (20) exp -> . VAR = exptext
    (31) instruction -> . PRINT
    (32) instruction -> . RETURN
    (33) instruction -> . INSTRUCTION

    $end            reduce using rule 2 (comandos -> .)
    %               shift and go to state 12
    COMMENT         shift and go to state 13
    /               shift and go to state 14
    +               shift and go to state 15
    »               shift and go to state 16
    VAR             shift and go to state 17
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    INSTRUCTION     shift and go to state 20

    comando                        shift and go to state 3
    comandos                       shift and go to state 21
    percent                        shift and go to state 4
    doublepercent                  shift and go to state 5
    comment                        shift and go to state 6
    lex                            shift and go to state 7
    yacc                           shift and go to state 8
    func                           shift and go to state 9
    exp                            shift and go to state 10
    instruction                    shift and go to state 11

state 4

    (4) comando -> percent .

    %               reduce using rule 4 (comando -> percent .)
    COMMENT         reduce using rule 4 (comando -> percent .)
    /               reduce using rule 4 (comando -> percent .)
    +               reduce using rule 4 (comando -> percent .)
    »               reduce using rule 4 (comando -> percent .)
    VAR             reduce using rule 4 (comando -> percent .)
    PRINT           reduce using rule 4 (comando -> percent .)
    RETURN          reduce using rule 4 (comando -> percent .)
    INSTRUCTION     reduce using rule 4 (comando -> percent .)
    $end            reduce using rule 4 (comando -> percent .)


state 5

    (5) comando -> doublepercent .

    %               reduce using rule 5 (comando -> doublepercent .)
    COMMENT         reduce using rule 5 (comando -> doublepercent .)
    /               reduce using rule 5 (comando -> doublepercent .)
    +               reduce using rule 5 (comando -> doublepercent .)
    »               reduce using rule 5 (comando -> doublepercent .)
    VAR             reduce using rule 5 (comando -> doublepercent .)
    PRINT           reduce using rule 5 (comando -> doublepercent .)
    RETURN          reduce using rule 5 (comando -> doublepercent .)
    INSTRUCTION     reduce using rule 5 (comando -> doublepercent .)
    $end            reduce using rule 5 (comando -> doublepercent .)


state 6

    (6) comando -> comment .

    %               reduce using rule 6 (comando -> comment .)
    COMMENT         reduce using rule 6 (comando -> comment .)
    /               reduce using rule 6 (comando -> comment .)
    +               reduce using rule 6 (comando -> comment .)
    »               reduce using rule 6 (comando -> comment .)
    VAR             reduce using rule 6 (comando -> comment .)
    PRINT           reduce using rule 6 (comando -> comment .)
    RETURN          reduce using rule 6 (comando -> comment .)
    INSTRUCTION     reduce using rule 6 (comando -> comment .)
    $end            reduce using rule 6 (comando -> comment .)


state 7

    (7) comando -> lex .

    %               reduce using rule 7 (comando -> lex .)
    COMMENT         reduce using rule 7 (comando -> lex .)
    /               reduce using rule 7 (comando -> lex .)
    +               reduce using rule 7 (comando -> lex .)
    »               reduce using rule 7 (comando -> lex .)
    VAR             reduce using rule 7 (comando -> lex .)
    PRINT           reduce using rule 7 (comando -> lex .)
    RETURN          reduce using rule 7 (comando -> lex .)
    INSTRUCTION     reduce using rule 7 (comando -> lex .)
    $end            reduce using rule 7 (comando -> lex .)


state 8

    (8) comando -> yacc .

    %               reduce using rule 8 (comando -> yacc .)
    COMMENT         reduce using rule 8 (comando -> yacc .)
    /               reduce using rule 8 (comando -> yacc .)
    +               reduce using rule 8 (comando -> yacc .)
    »               reduce using rule 8 (comando -> yacc .)
    VAR             reduce using rule 8 (comando -> yacc .)
    PRINT           reduce using rule 8 (comando -> yacc .)
    RETURN          reduce using rule 8 (comando -> yacc .)
    INSTRUCTION     reduce using rule 8 (comando -> yacc .)
    $end            reduce using rule 8 (comando -> yacc .)


state 9

    (9) comando -> func .

    %               reduce using rule 9 (comando -> func .)
    COMMENT         reduce using rule 9 (comando -> func .)
    /               reduce using rule 9 (comando -> func .)
    +               reduce using rule 9 (comando -> func .)
    »               reduce using rule 9 (comando -> func .)
    VAR             reduce using rule 9 (comando -> func .)
    PRINT           reduce using rule 9 (comando -> func .)
    RETURN          reduce using rule 9 (comando -> func .)
    INSTRUCTION     reduce using rule 9 (comando -> func .)
    $end            reduce using rule 9 (comando -> func .)


state 10

    (10) comando -> exp .

    %               reduce using rule 10 (comando -> exp .)
    COMMENT         reduce using rule 10 (comando -> exp .)
    /               reduce using rule 10 (comando -> exp .)
    +               reduce using rule 10 (comando -> exp .)
    »               reduce using rule 10 (comando -> exp .)
    VAR             reduce using rule 10 (comando -> exp .)
    PRINT           reduce using rule 10 (comando -> exp .)
    RETURN          reduce using rule 10 (comando -> exp .)
    INSTRUCTION     reduce using rule 10 (comando -> exp .)
    $end            reduce using rule 10 (comando -> exp .)


state 11

    (11) comando -> instruction .

    %               reduce using rule 11 (comando -> instruction .)
    COMMENT         reduce using rule 11 (comando -> instruction .)
    /               reduce using rule 11 (comando -> instruction .)
    +               reduce using rule 11 (comando -> instruction .)
    »               reduce using rule 11 (comando -> instruction .)
    VAR             reduce using rule 11 (comando -> instruction .)
    PRINT           reduce using rule 11 (comando -> instruction .)
    RETURN          reduce using rule 11 (comando -> instruction .)
    INSTRUCTION     reduce using rule 11 (comando -> instruction .)
    $end            reduce using rule 11 (comando -> instruction .)


state 12

    (14) percent -> % . atribs
    (13) doublepercent -> % . % var
    (23) atribs -> . literalsAndIgnore
    (24) atribs -> . tokens
    (26) literalsAndIgnore -> . var = plicastext
    (25) tokens -> . var = PRETTEXT
    (27) var -> . VAR

    %               shift and go to state 22
    VAR             shift and go to state 27

    atribs                         shift and go to state 23
    var                            shift and go to state 24
    literalsAndIgnore              shift and go to state 25
    tokens                         shift and go to state 26

state 13

    (12) comment -> COMMENT .

    %               reduce using rule 12 (comment -> COMMENT .)
    COMMENT         reduce using rule 12 (comment -> COMMENT .)
    /               reduce using rule 12 (comment -> COMMENT .)
    +               reduce using rule 12 (comment -> COMMENT .)
    »               reduce using rule 12 (comment -> COMMENT .)
    VAR             reduce using rule 12 (comment -> COMMENT .)
    PRINT           reduce using rule 12 (comment -> COMMENT .)
    RETURN          reduce using rule 12 (comment -> COMMENT .)
    INSTRUCTION     reduce using rule 12 (comment -> COMMENT .)
    $end            reduce using rule 12 (comment -> COMMENT .)


state 14

    (15) lex -> / . var extra : function
    (27) var -> . VAR

    VAR             shift and go to state 27

    var                            shift and go to state 28

state 15

    (19) yacc -> + . var : instruction exptext instructions FIM
    (27) var -> . VAR

    VAR             shift and go to state 27

    var                            shift and go to state 29

state 16

    (16) func -> » . var extra : function
    (27) var -> . VAR

    VAR             shift and go to state 27

    var                            shift and go to state 30

state 17

    (20) exp -> VAR . = exptext

    =               shift and go to state 31


state 18

    (31) instruction -> PRINT .

    %               reduce using rule 31 (instruction -> PRINT .)
    COMMENT         reduce using rule 31 (instruction -> PRINT .)
    /               reduce using rule 31 (instruction -> PRINT .)
    +               reduce using rule 31 (instruction -> PRINT .)
    »               reduce using rule 31 (instruction -> PRINT .)
    VAR             reduce using rule 31 (instruction -> PRINT .)
    PRINT           reduce using rule 31 (instruction -> PRINT .)
    RETURN          reduce using rule 31 (instruction -> PRINT .)
    INSTRUCTION     reduce using rule 31 (instruction -> PRINT .)
    $end            reduce using rule 31 (instruction -> PRINT .)
    EXPTEXT         reduce using rule 31 (instruction -> PRINT .)
    FIM             reduce using rule 31 (instruction -> PRINT .)


state 19

    (32) instruction -> RETURN .

    %               reduce using rule 32 (instruction -> RETURN .)
    COMMENT         reduce using rule 32 (instruction -> RETURN .)
    /               reduce using rule 32 (instruction -> RETURN .)
    +               reduce using rule 32 (instruction -> RETURN .)
    »               reduce using rule 32 (instruction -> RETURN .)
    VAR             reduce using rule 32 (instruction -> RETURN .)
    PRINT           reduce using rule 32 (instruction -> RETURN .)
    RETURN          reduce using rule 32 (instruction -> RETURN .)
    INSTRUCTION     reduce using rule 32 (instruction -> RETURN .)
    $end            reduce using rule 32 (instruction -> RETURN .)
    EXPTEXT         reduce using rule 32 (instruction -> RETURN .)
    FIM             reduce using rule 32 (instruction -> RETURN .)


state 20

    (33) instruction -> INSTRUCTION .

    %               reduce using rule 33 (instruction -> INSTRUCTION .)
    COMMENT         reduce using rule 33 (instruction -> INSTRUCTION .)
    /               reduce using rule 33 (instruction -> INSTRUCTION .)
    +               reduce using rule 33 (instruction -> INSTRUCTION .)
    »               reduce using rule 33 (instruction -> INSTRUCTION .)
    VAR             reduce using rule 33 (instruction -> INSTRUCTION .)
    PRINT           reduce using rule 33 (instruction -> INSTRUCTION .)
    RETURN          reduce using rule 33 (instruction -> INSTRUCTION .)
    INSTRUCTION     reduce using rule 33 (instruction -> INSTRUCTION .)
    $end            reduce using rule 33 (instruction -> INSTRUCTION .)
    EXPTEXT         reduce using rule 33 (instruction -> INSTRUCTION .)
    FIM             reduce using rule 33 (instruction -> INSTRUCTION .)


state 21

    (3) comandos -> comando comandos .

    $end            reduce using rule 3 (comandos -> comando comandos .)


state 22

    (13) doublepercent -> % % . var
    (27) var -> . VAR

    VAR             shift and go to state 27

    var                            shift and go to state 32

state 23

    (14) percent -> % atribs .

    %               reduce using rule 14 (percent -> % atribs .)
    COMMENT         reduce using rule 14 (percent -> % atribs .)
    /               reduce using rule 14 (percent -> % atribs .)
    +               reduce using rule 14 (percent -> % atribs .)
    »               reduce using rule 14 (percent -> % atribs .)
    VAR             reduce using rule 14 (percent -> % atribs .)
    PRINT           reduce using rule 14 (percent -> % atribs .)
    RETURN          reduce using rule 14 (percent -> % atribs .)
    INSTRUCTION     reduce using rule 14 (percent -> % atribs .)
    $end            reduce using rule 14 (percent -> % atribs .)


state 24

    (26) literalsAndIgnore -> var . = plicastext
    (25) tokens -> var . = PRETTEXT

    =               shift and go to state 33


state 25

    (23) atribs -> literalsAndIgnore .

    %               reduce using rule 23 (atribs -> literalsAndIgnore .)
    COMMENT         reduce using rule 23 (atribs -> literalsAndIgnore .)
    /               reduce using rule 23 (atribs -> literalsAndIgnore .)
    +               reduce using rule 23 (atribs -> literalsAndIgnore .)
    »               reduce using rule 23 (atribs -> literalsAndIgnore .)
    VAR             reduce using rule 23 (atribs -> literalsAndIgnore .)
    PRINT           reduce using rule 23 (atribs -> literalsAndIgnore .)
    RETURN          reduce using rule 23 (atribs -> literalsAndIgnore .)
    INSTRUCTION     reduce using rule 23 (atribs -> literalsAndIgnore .)
    $end            reduce using rule 23 (atribs -> literalsAndIgnore .)


state 26

    (24) atribs -> tokens .

    %               reduce using rule 24 (atribs -> tokens .)
    COMMENT         reduce using rule 24 (atribs -> tokens .)
    /               reduce using rule 24 (atribs -> tokens .)
    +               reduce using rule 24 (atribs -> tokens .)
    »               reduce using rule 24 (atribs -> tokens .)
    VAR             reduce using rule 24 (atribs -> tokens .)
    PRINT           reduce using rule 24 (atribs -> tokens .)
    RETURN          reduce using rule 24 (atribs -> tokens .)
    INSTRUCTION     reduce using rule 24 (atribs -> tokens .)
    $end            reduce using rule 24 (atribs -> tokens .)


state 27

    (27) var -> VAR .

    =               reduce using rule 27 (var -> VAR .)
    VAR             reduce using rule 27 (var -> VAR .)
    :               reduce using rule 27 (var -> VAR .)
    %               reduce using rule 27 (var -> VAR .)
    COMMENT         reduce using rule 27 (var -> VAR .)
    /               reduce using rule 27 (var -> VAR .)
    +               reduce using rule 27 (var -> VAR .)
    »               reduce using rule 27 (var -> VAR .)
    PRINT           reduce using rule 27 (var -> VAR .)
    RETURN          reduce using rule 27 (var -> VAR .)
    INSTRUCTION     reduce using rule 27 (var -> VAR .)
    $end            reduce using rule 27 (var -> VAR .)


state 28

    (15) lex -> / var . extra : function
    (17) extra -> .
    (18) extra -> . var
    (27) var -> . VAR

    :               reduce using rule 17 (extra -> .)
    VAR             shift and go to state 27

    var                            shift and go to state 34
    extra                          shift and go to state 35

state 29

    (19) yacc -> + var . : instruction exptext instructions FIM

    :               shift and go to state 36


state 30

    (16) func -> » var . extra : function
    (17) extra -> .
    (18) extra -> . var
    (27) var -> . VAR

    :               reduce using rule 17 (extra -> .)
    VAR             shift and go to state 27

    var                            shift and go to state 34
    extra                          shift and go to state 37

state 31

    (20) exp -> VAR = . exptext
    (34) exptext -> .
    (35) exptext -> . EXPTEXT

    %               reduce using rule 34 (exptext -> .)
    COMMENT         reduce using rule 34 (exptext -> .)
    /               reduce using rule 34 (exptext -> .)
    +               reduce using rule 34 (exptext -> .)
    »               reduce using rule 34 (exptext -> .)
    VAR             reduce using rule 34 (exptext -> .)
    PRINT           reduce using rule 34 (exptext -> .)
    RETURN          reduce using rule 34 (exptext -> .)
    INSTRUCTION     reduce using rule 34 (exptext -> .)
    $end            reduce using rule 34 (exptext -> .)
    EXPTEXT         shift and go to state 39

    exptext                        shift and go to state 38

state 32

    (13) doublepercent -> % % var .

    %               reduce using rule 13 (doublepercent -> % % var .)
    COMMENT         reduce using rule 13 (doublepercent -> % % var .)
    /               reduce using rule 13 (doublepercent -> % % var .)
    +               reduce using rule 13 (doublepercent -> % % var .)
    »               reduce using rule 13 (doublepercent -> % % var .)
    VAR             reduce using rule 13 (doublepercent -> % % var .)
    PRINT           reduce using rule 13 (doublepercent -> % % var .)
    RETURN          reduce using rule 13 (doublepercent -> % % var .)
    INSTRUCTION     reduce using rule 13 (doublepercent -> % % var .)
    $end            reduce using rule 13 (doublepercent -> % % var .)


state 33

    (26) literalsAndIgnore -> var = . plicastext
    (25) tokens -> var = . PRETTEXT
    (36) plicastext -> . PLICASTEXT

    PRETTEXT        shift and go to state 41
    PLICASTEXT      shift and go to state 42

    plicastext                     shift and go to state 40

state 34

    (18) extra -> var .

    :               reduce using rule 18 (extra -> var .)


state 35

    (15) lex -> / var extra . : function

    :               shift and go to state 43


state 36

    (19) yacc -> + var : . instruction exptext instructions FIM
    (31) instruction -> . PRINT
    (32) instruction -> . RETURN
    (33) instruction -> . INSTRUCTION

    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    INSTRUCTION     shift and go to state 20

    instruction                    shift and go to state 44

state 37

    (16) func -> » var extra . : function

    :               shift and go to state 45


state 38

    (20) exp -> VAR = exptext .

    %               reduce using rule 20 (exp -> VAR = exptext .)
    COMMENT         reduce using rule 20 (exp -> VAR = exptext .)
    /               reduce using rule 20 (exp -> VAR = exptext .)
    +               reduce using rule 20 (exp -> VAR = exptext .)
    »               reduce using rule 20 (exp -> VAR = exptext .)
    VAR             reduce using rule 20 (exp -> VAR = exptext .)
    PRINT           reduce using rule 20 (exp -> VAR = exptext .)
    RETURN          reduce using rule 20 (exp -> VAR = exptext .)
    INSTRUCTION     reduce using rule 20 (exp -> VAR = exptext .)
    $end            reduce using rule 20 (exp -> VAR = exptext .)


state 39

    (35) exptext -> EXPTEXT .

    %               reduce using rule 35 (exptext -> EXPTEXT .)
    COMMENT         reduce using rule 35 (exptext -> EXPTEXT .)
    /               reduce using rule 35 (exptext -> EXPTEXT .)
    +               reduce using rule 35 (exptext -> EXPTEXT .)
    »               reduce using rule 35 (exptext -> EXPTEXT .)
    VAR             reduce using rule 35 (exptext -> EXPTEXT .)
    PRINT           reduce using rule 35 (exptext -> EXPTEXT .)
    RETURN          reduce using rule 35 (exptext -> EXPTEXT .)
    INSTRUCTION     reduce using rule 35 (exptext -> EXPTEXT .)
    $end            reduce using rule 35 (exptext -> EXPTEXT .)
    FIM             reduce using rule 35 (exptext -> EXPTEXT .)


state 40

    (26) literalsAndIgnore -> var = plicastext .

    %               reduce using rule 26 (literalsAndIgnore -> var = plicastext .)
    COMMENT         reduce using rule 26 (literalsAndIgnore -> var = plicastext .)
    /               reduce using rule 26 (literalsAndIgnore -> var = plicastext .)
    +               reduce using rule 26 (literalsAndIgnore -> var = plicastext .)
    »               reduce using rule 26 (literalsAndIgnore -> var = plicastext .)
    VAR             reduce using rule 26 (literalsAndIgnore -> var = plicastext .)
    PRINT           reduce using rule 26 (literalsAndIgnore -> var = plicastext .)
    RETURN          reduce using rule 26 (literalsAndIgnore -> var = plicastext .)
    INSTRUCTION     reduce using rule 26 (literalsAndIgnore -> var = plicastext .)
    $end            reduce using rule 26 (literalsAndIgnore -> var = plicastext .)


state 41

    (25) tokens -> var = PRETTEXT .

    %               reduce using rule 25 (tokens -> var = PRETTEXT .)
    COMMENT         reduce using rule 25 (tokens -> var = PRETTEXT .)
    /               reduce using rule 25 (tokens -> var = PRETTEXT .)
    +               reduce using rule 25 (tokens -> var = PRETTEXT .)
    »               reduce using rule 25 (tokens -> var = PRETTEXT .)
    VAR             reduce using rule 25 (tokens -> var = PRETTEXT .)
    PRINT           reduce using rule 25 (tokens -> var = PRETTEXT .)
    RETURN          reduce using rule 25 (tokens -> var = PRETTEXT .)
    INSTRUCTION     reduce using rule 25 (tokens -> var = PRETTEXT .)
    $end            reduce using rule 25 (tokens -> var = PRETTEXT .)


state 42

    (36) plicastext -> PLICASTEXT .

    %               reduce using rule 36 (plicastext -> PLICASTEXT .)
    COMMENT         reduce using rule 36 (plicastext -> PLICASTEXT .)
    /               reduce using rule 36 (plicastext -> PLICASTEXT .)
    +               reduce using rule 36 (plicastext -> PLICASTEXT .)
    »               reduce using rule 36 (plicastext -> PLICASTEXT .)
    VAR             reduce using rule 36 (plicastext -> PLICASTEXT .)
    PRINT           reduce using rule 36 (plicastext -> PLICASTEXT .)
    RETURN          reduce using rule 36 (plicastext -> PLICASTEXT .)
    INSTRUCTION     reduce using rule 36 (plicastext -> PLICASTEXT .)
    $end            reduce using rule 36 (plicastext -> PLICASTEXT .)


state 43

    (15) lex -> / var extra : . function
    (21) function -> . instructions FIM
    (22) function -> . expreg instructions FIM
    (29) instructions -> .
    (30) instructions -> . instruction instructions
    (28) expreg -> . text
    (31) instruction -> . PRINT
    (32) instruction -> . RETURN
    (33) instruction -> . INSTRUCTION
    (37) text -> . TEXT

    FIM             reduce using rule 29 (instructions -> .)
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    INSTRUCTION     shift and go to state 20
    TEXT            shift and go to state 51

    function                       shift and go to state 46
    instructions                   shift and go to state 47
    expreg                         shift and go to state 48
    instruction                    shift and go to state 49
    text                           shift and go to state 50

state 44

    (19) yacc -> + var : instruction . exptext instructions FIM
    (34) exptext -> .
    (35) exptext -> . EXPTEXT

    PRINT           reduce using rule 34 (exptext -> .)
    RETURN          reduce using rule 34 (exptext -> .)
    INSTRUCTION     reduce using rule 34 (exptext -> .)
    FIM             reduce using rule 34 (exptext -> .)
    EXPTEXT         shift and go to state 39

    exptext                        shift and go to state 52

state 45

    (16) func -> » var extra : . function
    (21) function -> . instructions FIM
    (22) function -> . expreg instructions FIM
    (29) instructions -> .
    (30) instructions -> . instruction instructions
    (28) expreg -> . text
    (31) instruction -> . PRINT
    (32) instruction -> . RETURN
    (33) instruction -> . INSTRUCTION
    (37) text -> . TEXT

    FIM             reduce using rule 29 (instructions -> .)
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    INSTRUCTION     shift and go to state 20
    TEXT            shift and go to state 51

    function                       shift and go to state 53
    instructions                   shift and go to state 47
    expreg                         shift and go to state 48
    instruction                    shift and go to state 49
    text                           shift and go to state 50

state 46

    (15) lex -> / var extra : function .

    %               reduce using rule 15 (lex -> / var extra : function .)
    COMMENT         reduce using rule 15 (lex -> / var extra : function .)
    /               reduce using rule 15 (lex -> / var extra : function .)
    +               reduce using rule 15 (lex -> / var extra : function .)
    »               reduce using rule 15 (lex -> / var extra : function .)
    VAR             reduce using rule 15 (lex -> / var extra : function .)
    PRINT           reduce using rule 15 (lex -> / var extra : function .)
    RETURN          reduce using rule 15 (lex -> / var extra : function .)
    INSTRUCTION     reduce using rule 15 (lex -> / var extra : function .)
    $end            reduce using rule 15 (lex -> / var extra : function .)


state 47

    (21) function -> instructions . FIM

    FIM             shift and go to state 54


state 48

    (22) function -> expreg . instructions FIM
    (29) instructions -> .
    (30) instructions -> . instruction instructions
    (31) instruction -> . PRINT
    (32) instruction -> . RETURN
    (33) instruction -> . INSTRUCTION

    FIM             reduce using rule 29 (instructions -> .)
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    INSTRUCTION     shift and go to state 20

    instructions                   shift and go to state 55
    instruction                    shift and go to state 49

state 49

    (30) instructions -> instruction . instructions
    (29) instructions -> .
    (30) instructions -> . instruction instructions
    (31) instruction -> . PRINT
    (32) instruction -> . RETURN
    (33) instruction -> . INSTRUCTION

    FIM             reduce using rule 29 (instructions -> .)
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    INSTRUCTION     shift and go to state 20

    instruction                    shift and go to state 49
    instructions                   shift and go to state 56

state 50

    (28) expreg -> text .

    PRINT           reduce using rule 28 (expreg -> text .)
    RETURN          reduce using rule 28 (expreg -> text .)
    INSTRUCTION     reduce using rule 28 (expreg -> text .)
    FIM             reduce using rule 28 (expreg -> text .)


state 51

    (37) text -> TEXT .

    PRINT           reduce using rule 37 (text -> TEXT .)
    RETURN          reduce using rule 37 (text -> TEXT .)
    INSTRUCTION     reduce using rule 37 (text -> TEXT .)
    FIM             reduce using rule 37 (text -> TEXT .)


state 52

    (19) yacc -> + var : instruction exptext . instructions FIM
    (29) instructions -> .
    (30) instructions -> . instruction instructions
    (31) instruction -> . PRINT
    (32) instruction -> . RETURN
    (33) instruction -> . INSTRUCTION

    FIM             reduce using rule 29 (instructions -> .)
    PRINT           shift and go to state 18
    RETURN          shift and go to state 19
    INSTRUCTION     shift and go to state 20

    instruction                    shift and go to state 49
    instructions                   shift and go to state 57

state 53

    (16) func -> » var extra : function .

    %               reduce using rule 16 (func -> » var extra : function .)
    COMMENT         reduce using rule 16 (func -> » var extra : function .)
    /               reduce using rule 16 (func -> » var extra : function .)
    +               reduce using rule 16 (func -> » var extra : function .)
    »               reduce using rule 16 (func -> » var extra : function .)
    VAR             reduce using rule 16 (func -> » var extra : function .)
    PRINT           reduce using rule 16 (func -> » var extra : function .)
    RETURN          reduce using rule 16 (func -> » var extra : function .)
    INSTRUCTION     reduce using rule 16 (func -> » var extra : function .)
    $end            reduce using rule 16 (func -> » var extra : function .)


state 54

    (21) function -> instructions FIM .

    %               reduce using rule 21 (function -> instructions FIM .)
    COMMENT         reduce using rule 21 (function -> instructions FIM .)
    /               reduce using rule 21 (function -> instructions FIM .)
    +               reduce using rule 21 (function -> instructions FIM .)
    »               reduce using rule 21 (function -> instructions FIM .)
    VAR             reduce using rule 21 (function -> instructions FIM .)
    PRINT           reduce using rule 21 (function -> instructions FIM .)
    RETURN          reduce using rule 21 (function -> instructions FIM .)
    INSTRUCTION     reduce using rule 21 (function -> instructions FIM .)
    $end            reduce using rule 21 (function -> instructions FIM .)


state 55

    (22) function -> expreg instructions . FIM

    FIM             shift and go to state 58


state 56

    (30) instructions -> instruction instructions .

    FIM             reduce using rule 30 (instructions -> instruction instructions .)


state 57

    (19) yacc -> + var : instruction exptext instructions . FIM

    FIM             shift and go to state 59


state 58

    (22) function -> expreg instructions FIM .

    %               reduce using rule 22 (function -> expreg instructions FIM .)
    COMMENT         reduce using rule 22 (function -> expreg instructions FIM .)
    /               reduce using rule 22 (function -> expreg instructions FIM .)
    +               reduce using rule 22 (function -> expreg instructions FIM .)
    »               reduce using rule 22 (function -> expreg instructions FIM .)
    VAR             reduce using rule 22 (function -> expreg instructions FIM .)
    PRINT           reduce using rule 22 (function -> expreg instructions FIM .)
    RETURN          reduce using rule 22 (function -> expreg instructions FIM .)
    INSTRUCTION     reduce using rule 22 (function -> expreg instructions FIM .)
    $end            reduce using rule 22 (function -> expreg instructions FIM .)


state 59

    (19) yacc -> + var : instruction exptext instructions FIM .

    %               reduce using rule 19 (yacc -> + var : instruction exptext instructions FIM .)
    COMMENT         reduce using rule 19 (yacc -> + var : instruction exptext instructions FIM .)
    /               reduce using rule 19 (yacc -> + var : instruction exptext instructions FIM .)
    +               reduce using rule 19 (yacc -> + var : instruction exptext instructions FIM .)
    »               reduce using rule 19 (yacc -> + var : instruction exptext instructions FIM .)
    VAR             reduce using rule 19 (yacc -> + var : instruction exptext instructions FIM .)
    PRINT           reduce using rule 19 (yacc -> + var : instruction exptext instructions FIM .)
    RETURN          reduce using rule 19 (yacc -> + var : instruction exptext instructions FIM .)
    INSTRUCTION     reduce using rule 19 (yacc -> + var : instruction exptext instructions FIM .)
    $end            reduce using rule 19 (yacc -> + var : instruction exptext instructions FIM .)

